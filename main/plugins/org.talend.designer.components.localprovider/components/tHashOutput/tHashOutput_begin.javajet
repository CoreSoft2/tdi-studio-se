<%@ jet
	imports="
        java.util.HashSet
        java.util.List
        java.util.Set
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
	"
%>
<%
	class Util{
		//keep the tHashOutput Name when on the searching patch, in order to avoid the cycle reference problem.
		Set<String> nodeNames = new HashSet<String>();
		List<? extends INode> nodes = null;
		//the parameter node is tHashInput/tHashOutput
		public INode getOriginaltHashOutputNode(INode node) throws java.lang.Exception{	
			//initial it only once.
			if(nodes == null){
				nodes = node.getProcess().getGeneratingNodes();
			}
			
			String uniqueName = node.getUniqueName();
			if(nodeNames.contains(uniqueName)){
				//happen the cycle problem!!!
				//return null;
				throw new java.lang.Exception("Problem with " + uniqueName + " caused by cross-linking two tHashOutput components to each other.");
			}else{
				nodeNames.add(uniqueName);
				//1. get the tHashOuput node
				boolean isLinked = "true".equals(ElementParameterParser.getValue(node, "__LINK_WITH__"));
				String tHashOutputName = ElementParameterParser.getValue(node, "__LIST__");
				if(isLinked){
				
					//System.out.println("Node:" + uniqueName);
					//System.out.println("__LINK_WITH__:" + isLinked);
					//System.out.println("__LIST__:" + tHashOutputName);
					
					if(tHashOutputName != null && !tHashOutputName.trim().equals("")){
						INode tHashOutput = getNodeFromProcess(tHashOutputName);
						if(tHashOutput != null){
							//recursive call it!!!
							return getOriginaltHashOutputNode(tHashOutput);
						}else{
							//if go here, it means that user delete the original tHashOutput 
							//return null;
							throw new java.lang.Exception("if go here, it means that user delete the original tHashOutput.");
						}
					}else{
						//if go here, it means there should link to a tHashOutput, but user doesn't it.
						//return null;
						throw new java.lang.Exception("if go here, it means there should link to a tHashOutput, but user doesn't it.");
					}
				}else{
					//get it!!! it can be a 1).tHashInput(read file directly), 2). tHashOuput (the original one)  
					return node;
				}				
			}			
		}
		
		private INode getNodeFromProcess(String nodeName){			
	    	for (INode nd : nodes) {
	     	   if (nd.getUniqueName().equals(nodeName)) {
	     	      return nd;
	     	   }
	     	}			
			return null;
		}	
		
	}
%>

<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	String jobName = codeGenArgument.getJobName();
	INode node = (INode)codeGenArgument.getArgument();	
	String cid = node.getUniqueName();
	
	//1. get the tHashOuput node
	boolean isLinked = "true".equals(ElementParameterParser.getValue(node, "__LINK_WITH__"));
	String tHashOutputName = ElementParameterParser.getValue(node, "__LIST__");
	INode tHashOutputNode = null;
	if(isLinked){
		try{
			Util util = new Util();
			tHashOutputNode = util.getOriginaltHashOutputNode(node);	
			//System.out.println(tHashOutputNode.getUniqueName());
		}catch(java.lang.Exception e){%>
			<%=e.getMessage() %>
		<%}
	}
	
	//2. get tHashInput medadata
	IMetadataTable metadata = null;
	List<IMetadataTable> metadatas = node.getMetadataList();
	if (metadatas != null && metadatas.size() > 0) {
    	metadata = metadatas.get(0);
    }
    
    //3. get tHashOutput medadata
	IMetadataTable tHashOutput_metadata = null;	
	if(tHashOutputNode != null){
    	List<IMetadataTable> tHashOutput_metadatas = tHashOutputNode.getMetadataList();
    	if (tHashOutput_metadatas != null && tHashOutput_metadatas.size() > 0) {
        	tHashOutput_metadata = tHashOutput_metadatas.get(0);
        }
	}
	
	//5. get tHashInput output connectionName
	IConnection outputDataConn = null;
	String outputDataConnName = null;
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	if (conns != null) {
		for (IConnection conn : conns) {
			if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
				outputDataConn = conn;
				outputDataConnName = outputDataConn.getName();
				break;
			}
		}
	}
	
	//6. get tHashOutput incomming connectionName
	IConnection tHashOutput_incommingDataConn = null;
	String tHashOutput_incommingDataConnName = null;
	if(tHashOutputNode != null){
    	List< ? extends IConnection> tHashOutput_conns = tHashOutputNode.getIncomingConnections();
    	if (conns != null) {
    		for (IConnection conn : tHashOutput_conns) {
    			if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
    				tHashOutput_incommingDataConn = conn;
    				tHashOutput_incommingDataConnName = tHashOutput_incommingDataConn.getName();
    				break;
    			}
    		}
    	}
	}
%>


<%	
	String matchingMode = ElementParameterParser.getValue(node,"__KEYS_MANAGEMENT__");
	
	//7. get input data connection	
	IConnection incommingDataConn = null;
    List< ? extends IConnection> connections = node.getIncomingConnections();
	if (connections != null) {
		for (IConnection conn : connections) {
			if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)){
				incommingDataConn = conn;
				break;
			}
		}
	}
%>
<%
//fix bug 21630,add a class MapHashFile,when the AdvancedMemoryHashFile of the linked tHashOutput is null,use method getAdvancedMemoryHashFile to get previous AdvancedMemoryHashFile.
%>
org.talend.designer.components.hashfile.common.MemoryCaches memoryCaches_<%=cid %> = org.talend.designer.components.hashfile.common.MemoryCaches.getInstance();
<%	
if (!isLinked) {
	boolean isAppend = "true".equals(ElementParameterParser.getValue(node, "__APPEND__"));
	if (incommingDataConn != null) {
		String connectionName = incommingDataConn.getName();
%>    
		org.talend.designer.components.hashfile.common.Cache<<%=connectionName %>Struct> cache_<%=cid %> = null;
		String hashKey_<%=cid %> = "tHashFile_<%=jobName %>_" + pid + "_<%=cid %>";
<%
		// It is used when Iterator exists in the same job
		if (isAppend) {
%>
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_<%=cid %>)) {
				// if first iteration
			    if (memoryCaches_<%=cid %>.getMemoryCache(hashKey_<%=cid %>) == null) {
					cache_<%=cid %> = org.talend.designer.components.hashfile.memory.MemoryCacheFactory.createMemoryCache("<%=matchingMode %>");
	      		    memoryCaches_<%=cid %>.addMemoryCache(hashKey_<%=cid %>, cache_<%=cid %>);
				// if not first iteration
			    }else{
			    	cache_<%=cid %> = memoryCaches_<%=cid %>.getMemoryCache(hashKey_<%=cid %>);
			    }
			}
<%
		} else {
%>
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_<%=cid %>)) {
				cache_<%=cid %> = org.talend.designer.components.hashfile.memory.MemoryCacheFactory.createMemoryCache(<%=matchingMode %>);
				memoryCaches_<%=cid %>.addMemoryCache(hashKey_<%=cid %>, keepCache_<%=cid %>);
			}
<%
		}
	}
} else {
	// tHashOutput component is linked to another tHashOutput, so it works in append model.
%>
	org.talend.designer.components.hashfile.common.Cache<<%=tHashOutput_incommingDataConnName %>Struct> cache_<%=cid %> = memoryCaches_<%=cid %>.getMemoryCache("tHashFile_<%=jobName %>_" + pid + "_<%=tHashOutputName %>");
	// Associate linked key with the same cache object
	memoryCaches_<%=cid %>.addMemoryCache("tHashFile_<%=jobName %>_" + pid + "_<%=cid %>", cache_<%=cid %>);
<%
}
%>
    int nb_line_<%=cid %> = 0;